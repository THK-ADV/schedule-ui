{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { timeFromString } from '../models/time';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../structure/alert/alert.service\";\nexport const parseDateStartEndFromJSON = a => {\n  const date = new Date(a.date);\n  const start = timeFromString(a.start, date);\n  const end = timeFromString(a.end, date);\n  return Object.assign(Object.assign({}, a), {\n    date,\n    start,\n    end\n  });\n};\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(http, alert) {\n      this.http = http;\n      this.alert = alert;\n      this.handleError = error => {\n        let alert;\n        if (error.status === 0) {\n          alert = {\n            type: 'danger',\n            body: {\n              kind: 'message',\n              value: `An error occurred: ${JSON.stringify(error.error)}`\n            }\n          };\n        } else {\n          alert = {\n            type: 'danger',\n            body: {\n              kind: 'message',\n              value: `Backend returned code: ${error.status} with message: ${JSON.stringify(error.error)}`\n            }\n          };\n        }\n        console.error(alert.body.value);\n        this.alert.reportAlert(alert);\n        return EMPTY;\n      };\n      this.getAll = (url, params) => this.http.get(url, {\n        params\n      }).pipe(catchError(this.handleError));\n      this.get = (url, params) => this.http.get(url, {\n        params\n      }).pipe(catchError(this.handleError));\n      this.post = (url, body, params) => this.http.post(url, body, {\n        params\n      }).pipe(catchError(this.handleError));\n      this.delete = url => this.http.delete(url).pipe(catchError(this.handleError));\n      this.create = (url, body) => this.http.post(url, body).pipe(catchError(this.handleError));\n      this.put = (url, body) => this.http.put(url, body).pipe(catchError(this.handleError));\n    }\n  }\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertService));\n  };\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module"}