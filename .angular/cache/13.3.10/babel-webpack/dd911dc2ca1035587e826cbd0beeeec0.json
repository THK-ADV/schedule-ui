{"ast":null,"code":"import { forkJoin, Subject } from 'rxjs';\nimport { distinctBy, distinctMap } from '../../utils/array-ops';\nimport { groupBy, mapGroup } from '../../utils/group-by';\nimport { ordinal } from '../../models/course-type';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../http/teaching-unit-api.service\";\nimport * as i2 from \"../../http/course-api.service\";\nimport * as i3 from \"../../http/module-examination-regulation-api.service\";\nimport * as i4 from \"../../http/user-api.service\";\nexport let ScheduleFilterService = /*#__PURE__*/(() => {\n  class ScheduleFilterService {\n    constructor(teachingUnitApi, courseApi, moduleExamsApi, userApi) {\n      this.teachingUnitApi = teachingUnitApi;\n      this.courseApi = courseApi;\n      this.moduleExamsApi = moduleExamsApi;\n      this.userApi = userApi;\n      this.allTeachingUnits = [];\n      this.allCourses = [];\n      this.allLecturer = [];\n      this.allModuleExams = [];\n      this.allStudyProgramsWithExam = [];\n      this.filterState = new Subject();\n      this.fetchData = semesterId => {\n        forkJoin({\n          tu: this.teachingUnitApi.teachingUnits(),\n          c: this.courseApi.coursesForCurrentSemester(semesterId),\n          me: this.moduleExamsApi.moduleExams(),\n          lec: this.userApi.lecturer()\n        }).subscribe(a => {\n          const moduleExams = a.me;\n          const studyProgramsWithExam = distinctBy(moduleExams.map(_ => _.examinationRegulation), e => e.id).sort(this.sortExams);\n          const courses = this.distinctCourses(a.c).sort(this.sortCourses);\n          const lecturer = a.lec.sort(this.sortLecturer);\n          const teachingUnits = a.tu.sort(this.sortTeachingUnits);\n          this.allTeachingUnits = teachingUnits;\n          this.allCourses = courses;\n          this.allLecturer = lecturer;\n          this.allModuleExams = moduleExams;\n          this.allStudyProgramsWithExam = studyProgramsWithExam;\n          this.filterState.next({\n            teachingUnits,\n            semesterIndices: this.semesterIndicesByCourses(courses).sort(this.sortSemesterIndices),\n            lecturers: lecturer,\n            courses,\n            studyProgramsWithExam,\n            languages: this.languagesByCourses(courses).sort(this.sortLanguages),\n            courseTypes: this.courseTypesByCourses(courses).sort(this.sortCourseTypes)\n          });\n        });\n        return this.filterState.asObservable();\n      };\n      this.distinctCourses = cs => mapGroup(groupBy(cs, c => c.subModule.id), (_, courses) => {\n        return {\n          course: Object.assign({}, courses[0]),\n          lecturer: this.sortCoursesByCourseType(distinctBy(courses, c => c.lecturer.id)).map(c => c.lecturer)\n        };\n      });\n      this.sortCoursesByCourseType = cs => cs.sort((lhs, rhs) => ordinal(lhs.courseType) - ordinal(rhs.courseType));\n      this.sortExams = (lhs, rhs) => lhs.studyProgram.label.localeCompare(rhs.studyProgram.label) || lhs.number - rhs.number;\n      this.sortCourses = (lhs, rhs) => lhs.course.subModule.label.localeCompare(rhs.course.subModule.label);\n      this.sortLecturer = (lhs, rhs) => lhs.lastname.localeCompare(rhs.lastname) || lhs.firstname.localeCompare(rhs.firstname);\n      this.sortTeachingUnits = (lhs, rhs) => lhs.number - rhs.number;\n      this.sortSemesterIndices = (lhs, rhs) => lhs - rhs;\n      this.sortLanguages = (lhs, rhs) => lhs.localeCompare(rhs);\n      this.sortCourseTypes = (lhs, rhs) => lhs.localeCompare(rhs);\n      this.filter = (src, f) => {\n        const filters = [];\n        f(filters);\n        return filters.length === 0 ? src : src.filter(filters.reduce((a, b) => ss => a(ss) && b(ss)));\n      };\n      this.updateStudyProgramsWithExam = ({\n        teachingUnit,\n        lecturer,\n        course,\n        language,\n        courseType,\n        semesterIndex\n      }) => this.filter(this.allStudyProgramsWithExam, filters => {\n        if (teachingUnit) {\n          filters.push(e => e.studyProgram.teachingUnit.id === teachingUnit.id);\n        }\n        if (lecturer) {\n          filters.push(e => {\n            const ms = this.modulesByStudyProgramWithExam(e);\n            const cs = this.coursesByModules(ms);\n            const ls = this.lecturerByCourses(cs);\n            return ls.some(_ => _.id === lecturer.id);\n          });\n        }\n        if (course) {\n          filters.push(e => {\n            const ms = this.modulesByStudyProgramWithExam(e);\n            const cs = this.coursesByModules(ms);\n            return cs.some(_ => _.course.id === course.course.id);\n          });\n        }\n        if (language) {\n          filters.push(e => {\n            const ms = this.modulesByStudyProgramWithExam(e);\n            const cs = this.coursesByModules(ms);\n            const las = this.languagesByCourses(cs);\n            return las.some(lang => lang === language);\n          });\n        }\n        if (courseType) {\n          filters.push(e => {\n            const ms = this.modulesByStudyProgramWithExam(e);\n            const cs = this.coursesByModules(ms);\n            return cs.some(c => c.course.courseType === courseType);\n          });\n        }\n        if (semesterIndex) {\n          filters.push(e => {\n            const ms = this.modulesByStudyProgramWithExam(e);\n            const cs = this.coursesByModules(ms);\n            return cs.some(c => c.course.subModule.recommendedSemester === semesterIndex);\n          });\n        }\n      });\n      this.updateCourses = ({\n        teachingUnit,\n        semesterIndex,\n        examReg,\n        lecturer,\n        language,\n        courseType\n      }) => this.filter(this.allCourses, filters => {\n        if (teachingUnit) {\n          filters.push(c => {\n            const exams = this.examsByCourse(c);\n            return exams.some(e => e.studyProgram.teachingUnit.id === teachingUnit.id);\n          });\n        }\n        if (semesterIndex) {\n          filters.push(c => c.course.subModule.recommendedSemester === semesterIndex);\n        }\n        if (examReg) {\n          filters.push(c => {\n            const exams = this.examsByCourse(c);\n            return exams.some(e => e.id === examReg.id);\n          });\n        }\n        if (lecturer) {\n          filters.push(c => c.lecturer.some(_ => _.id === lecturer.id));\n        }\n        if (language) {\n          filters.push(c => c.course.subModule.language === language);\n        }\n        if (courseType) {\n          filters.push(c => c.course.courseType === courseType);\n        }\n      });\n      this.updateLecturer = ({\n        examReg,\n        teachingUnit,\n        course,\n        language,\n        courseType,\n        semesterIndex\n      }) => this.filter(this.allLecturer, filters => {\n        if (teachingUnit) {\n          filters.push(l => {\n            const cs = this.coursesByLecturer(l);\n            const exams = this.examsByCourses(cs);\n            return exams.some(e => e.studyProgram.teachingUnit.id === teachingUnit.id);\n          });\n        }\n        if (examReg) {\n          filters.push(l => {\n            const cs = this.coursesByLecturer(l);\n            const exams = this.examsByCourses(cs);\n            return exams.some(e => e.id === examReg.id);\n          });\n        }\n        if (course) {\n          filters.push(l => {\n            const cs = this.coursesByLecturer(l);\n            return cs.some(_ => _.course.id === course.course.id);\n          });\n        }\n        if (language) {\n          filters.push(l => {\n            const cs = this.coursesByLecturer(l);\n            return cs.some(_ => _.course.subModule.language === language);\n          });\n        }\n        if (courseType) {\n          filters.push(l => {\n            const cs = this.coursesByLecturer(l);\n            return cs.some(_ => _.course.courseType === courseType);\n          });\n        }\n        if (semesterIndex) {\n          filters.push(l => {\n            const cs = this.coursesByLecturer(l);\n            return cs.some(_ => _.course.subModule.recommendedSemester === semesterIndex);\n          });\n        }\n      });\n      this.updateTeachingUnits = ({\n        examReg,\n        lecturer,\n        course,\n        language,\n        courseType,\n        semesterIndex\n      }) => this.filter(this.allTeachingUnits, filters => {\n        if (examReg) {\n          filters.push(tu => {\n            const exams = this.examsByTeachingUnit(tu);\n            return exams.some(_ => _.id === examReg.id);\n          });\n        }\n        if (course) {\n          filters.push(tu => {\n            const ms = this.modulesByTeachingUnit(tu);\n            const cs = this.coursesByModules(ms);\n            return cs.some(_ => _.course.id === course.course.id);\n          });\n        }\n        if (lecturer) {\n          filters.push(tu => {\n            const ms = this.modulesByTeachingUnit(tu);\n            const cs = this.coursesByModules(ms);\n            return cs.some(c0 => c0.lecturer.some(_ => _.id === lecturer.id));\n          });\n        }\n        if (language) {\n          filters.push(tu => {\n            const ms = this.modulesByTeachingUnit(tu);\n            const cs = this.coursesByModules(ms);\n            const las = this.languagesByCourses(cs);\n            return las.some(lang => lang === language);\n          });\n        }\n        if (courseType) {\n          filters.push(tu => {\n            const ms = this.modulesByTeachingUnit(tu);\n            const cs = this.coursesByModules(ms);\n            return cs.some(c => c.course.courseType === courseType);\n          });\n        }\n        if (semesterIndex) {\n          filters.push(tu => {\n            const ms = this.modulesByTeachingUnit(tu);\n            const cs = this.coursesByModules(ms);\n            return cs.some(c => c.course.subModule.recommendedSemester === semesterIndex);\n          });\n        }\n      });\n      this.updateFilters = selections => {\n        const studyProgramsWithExam = selections.examReg ? [selections.examReg] : this.updateStudyProgramsWithExam(selections);\n        const courses = selections.course ? [selections.course] : this.updateCourses(selections);\n        const lecturers = selections.lecturer ? [selections.lecturer] : this.updateLecturer(selections);\n        const teachingUnits = selections.teachingUnit ? [selections.teachingUnit] : this.updateTeachingUnits(selections);\n        const languages = selections.language ? [selections.language] : this.languagesByCourses(courses).sort(this.sortLanguages);\n        const courseTypes = selections.courseType ? [selections.courseType] : this.courseTypesByCourses(courses).sort(this.sortCourseTypes);\n        const semesterIndices = selections.semesterIndex ? [selections.semesterIndex] : this.semesterIndicesByCourses(courses);\n        this.filterState.next({\n          studyProgramsWithExam,\n          courses,\n          languages,\n          lecturers,\n          teachingUnits,\n          semesterIndices,\n          courseTypes\n        });\n      };\n      this.languagesByCourses = courses => distinctMap(courses, ({\n        course\n      }) => course.subModule.language);\n      this.courseTypesByCourses = courses => distinctMap(courses, ({\n        course\n      }) => course.courseType);\n      this.semesterIndicesByCourses = courses => distinctMap(courses, ({\n        course\n      }) => course.subModule.recommendedSemester).sort(this.sortSemesterIndices);\n      this.examsByTeachingUnit = tu => this.allStudyProgramsWithExam.filter(e => e.studyProgram.teachingUnit.id === tu.id);\n      this.modulesByTeachingUnit = tu => this.allModuleExams.filter(me => me.examinationRegulation.studyProgram.teachingUnit.id === tu.id).map(_ => _.module);\n      this.modulesByStudyProgramWithExam = e => this.allModuleExams.filter(me => me.examinationRegulation.id === e.id).map(_ => _.module);\n      this.coursesByModules = ms => this.allCourses.filter(c => ms.some(m => m.id === c.course.subModule.module));\n      this.lecturerByCourses = cs => this.allLecturer.filter(l => cs.some(c => c.lecturer.some(_ => _.id === l.id)));\n      this.examsByCourse = c => this.allModuleExams.filter(me => me.module.id === c.course.subModule.module).map(_ => _.examinationRegulation);\n      this.examsByCourses = cs => this.allModuleExams.filter(me => cs.some(c => c.course.subModule.module === me.module.id)).map(_ => _.examinationRegulation);\n      this.coursesByLecturer = l => this.allCourses.filter(c => c.lecturer.some(_ => _.id === l.id));\n    }\n  }\n  ScheduleFilterService.ɵfac = function ScheduleFilterService_Factory(t) {\n    return new (t || ScheduleFilterService)(i0.ɵɵinject(i1.TeachingUnitApiService), i0.ɵɵinject(i2.CourseApiService), i0.ɵɵinject(i3.ModuleExaminationRegulationApiService), i0.ɵɵinject(i4.UserApiService));\n  };\n  ScheduleFilterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ScheduleFilterService,\n    factory: ScheduleFilterService.ɵfac,\n    providedIn: 'root'\n  });\n  return ScheduleFilterService;\n})();","map":null,"metadata":{},"sourceType":"module"}