{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { mapOpt, zip } from '../../utils/optional';\nimport { parseFloatNumber, parseLecturer } from '../../utils/parser';\nimport { describeUserWithCampusId } from '../../utils/describe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../http/module-api.service\";\nimport * as i2 from \"../../http/user-api.service\";\nexport let ModuleService = /*#__PURE__*/(() => {\n  class ModuleService {\n    constructor(http, userService) {\n      this.http = http;\n      this.userService = userService;\n      this.modules = () => this.http.modulesAtomic();\n      this.columns = () => [{\n        attr: 'label',\n        title: 'Bezeichnung'\n      }, {\n        attr: 'abbreviation',\n        title: 'Abkürzung'\n      }, {\n        attr: 'courseManager',\n        title: 'Modulverantwortlicher'\n      }, {\n        attr: 'credits',\n        title: 'ECTS'\n      }];\n      this.deleteAction = () => ({\n        labelForDialog: a => a.label,\n        delete: a => this.http.delete(a.id)\n      });\n      this.createAction = () => [{\n        create: attrs => {\n          var _a;\n          return (_a = mapOpt(this.parseProtocol(attrs), this.http.create)) !== null && _a !== void 0 ? _a : EMPTY;\n        },\n        show: a => JSON.stringify(a)\n      }, {\n        objectName: 'Modul',\n        inputs: this.createInputs()\n      }];\n      this.updateAction = () => [{\n        update: (m, attrs) => {\n          var _a;\n          return (_a = mapOpt(this.createProtocol(m, attrs), p => this.http.update(p, m.id))) !== null && _a !== void 0 ? _a : EMPTY;\n        },\n        show: a => JSON.stringify(a)\n      }, m => ({\n        objectName: 'Modul',\n        inputs: this.updateInputs(m)\n      })];\n      this.createInputs = () => [this.label, this.abbreviation, this.user, this.credits, this.descriptionUrl];\n      this.updateInputs = m => [Object.assign(Object.assign({}, this.label), {\n        initialValue: m.label\n      }), Object.assign(Object.assign({}, this.abbreviation), {\n        initialValue: m.abbreviation\n      }), Object.assign(Object.assign({}, this.user), {\n        initialValue: users => users.find(_ => _.id === m.courseManager.id)\n      }), Object.assign(Object.assign({}, this.credits), {\n        initialValue: m.credits\n      }), Object.assign(Object.assign({}, this.descriptionUrl), {\n        initialValue: m.descriptionUrl\n      })];\n      this.parseProtocol = attrs => mapOpt(zip(parseLecturer(attrs.courseManager), parseFloatNumber(attrs.credits)), ([courseManager, credits]) => ({\n        abbreviation: attrs.abbreviation,\n        label: attrs.label,\n        courseManager: courseManager.id,\n        descriptionUrl: attrs.descriptionUrl,\n        credits\n      }));\n      this.createProtocol = (m, attrs) => this.parseProtocol(Object.assign({}, attrs));\n      this.label = {\n        label: 'Bezeichnung',\n        attr: 'label',\n        kind: 'text',\n        disabled: false,\n        required: true\n      };\n      this.abbreviation = {\n        label: 'Abkürzung',\n        attr: 'abbreviation',\n        kind: 'text',\n        disabled: false,\n        required: true\n      };\n      this.user = {\n        label: 'Modulverantwortlicher',\n        attr: 'courseManager',\n        required: true,\n        disabled: false,\n        show: describeUserWithCampusId,\n        kind: 'auto-complete',\n        data: userService.lecturer()\n      };\n      this.credits = {\n        label: 'ECTS',\n        attr: 'credits',\n        required: true,\n        disabled: false,\n        kind: 'number',\n        min: 0.5\n      };\n      this.descriptionUrl = {\n        label: 'Link zum Modulehandbucheintrag',\n        attr: 'descriptionUrl',\n        required: true,\n        disabled: false,\n        kind: 'url'\n      };\n    }\n  }\n  ModuleService.ɵfac = function ModuleService_Factory(t) {\n    return new (t || ModuleService)(i0.ɵɵinject(i1.ModuleApiService), i0.ɵɵinject(i2.UserApiService));\n  };\n  ModuleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModuleService,\n    factory: ModuleService.ɵfac,\n    providedIn: 'root'\n  });\n  return ModuleService;\n})();","map":null,"metadata":{},"sourceType":"module"}