{"ast":null,"code":"import { describeLanguage, describeModule, describeSeason } from '../../utils/describe';\nimport { EMPTY, of } from 'rxjs';\nimport { mapOpt, zip5 } from '../../utils/optional';\nimport { parseFloatNumber, parseLanguage, parseModule, parseSeason, parseSemesterIndex } from '../../utils/parser';\nimport { allSemesterIndices } from '../../models/semester-index';\nimport { allLanguages } from '../../models/language';\nimport { allSeasons } from '../../models/season';\nimport { inspect } from '../../utils/inspect';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../http/submodule-api.service\";\nimport * as i2 from \"../../http/module-api.service\";\nexport let SubmoduleService = /*#__PURE__*/(() => {\n  class SubmoduleService {\n    constructor(http, moduleService) {\n      this.http = http;\n      this.moduleService = moduleService;\n      this.columns = () => [{\n        attr: 'label',\n        title: 'Bezeichnung'\n      }, {\n        attr: 'abbreviation',\n        title: 'Abkürzung'\n      }, {\n        attr: 'module',\n        title: 'Modul'\n      }, {\n        attr: 'recommendedSemester',\n        title: 'Fachsemester'\n      }, {\n        attr: 'credits',\n        title: 'ECTS'\n      }, {\n        attr: 'language',\n        title: 'Sprache'\n      }, {\n        attr: 'season',\n        title: 'Angeboten in'\n      }];\n      this.deleteAction = () => ({\n        labelForDialog: a => a.label,\n        delete: this.delete\n      });\n      this.createAction = () => [{\n        create: attrs => {\n          var _a;\n          return (_a = mapOpt(this.parseProtocol(attrs), this.create)) !== null && _a !== void 0 ? _a : EMPTY;\n        },\n        show: a => JSON.stringify(a)\n      }, {\n        objectName: 'Teilmodul',\n        inputs: this.createInputs()\n      }];\n      this.updateAction = () => [{\n        update: (sm, attrs) => {\n          var _a;\n          return (_a = mapOpt(this.createProtocol(sm, attrs), p => this.update(p, sm.id))) !== null && _a !== void 0 ? _a : EMPTY;\n        },\n        show: a => JSON.stringify(a)\n      }, m => ({\n        objectName: 'Teilmodul',\n        inputs: this.updateInputs(m)\n      })];\n      this.submodules = () => this.http.submodules();\n      this.delete = m => of(m);\n      this.create = p => of(inspect(Object.assign(Object.assign({}, p), {\n        id: 'random uuid'\n      })));\n      this.update = (p, id) => of(inspect(Object.assign(Object.assign({}, p), {\n        id\n      })));\n      this.createInputs = () => [this.label, this.abbreviation, this.module, this.recommendedSemester, this.credits, this.language, this.season, this.descriptionUrl];\n      this.updateInputs = m => [Object.assign(Object.assign({}, this.label), {\n        initialValue: m.label\n      }), Object.assign(Object.assign({}, this.abbreviation), {\n        initialValue: m.abbreviation\n      }), Object.assign(Object.assign({}, this.module), {\n        initialValue: ms => ms.find(_ => _.id === m.module.id),\n        disabled: true\n      }), Object.assign(Object.assign({}, this.recommendedSemester), {\n        initialValue: rrs => rrs.find(rs => rs === m.recommendedSemester)\n      }), Object.assign(Object.assign({}, this.credits), {\n        initialValue: m.credits,\n        disabled: true\n      }), Object.assign(Object.assign({}, this.language), {\n        initialValue: ls => ls.find(l => l.value === m.language)\n      }), Object.assign(Object.assign({}, this.season), {\n        initialValue: ss => ss.find(s => s.value === m.season)\n      }), Object.assign(Object.assign({}, this.descriptionUrl), {\n        initialValue: m.descriptionUrl\n      })];\n      this.parseLang = a => mapOpt(a === null || a === void 0 ? void 0 : a.value, parseLanguage);\n      this.parseSeas = a => mapOpt(a === null || a === void 0 ? void 0 : a.value, parseSeason);\n      this.parseProtocol = attrs => mapOpt(zip5(parseModule(attrs.module), parseSemesterIndex(attrs.recommendedSemester), this.parseLang(attrs.language), this.parseSeas(attrs.season), parseFloatNumber(attrs.credits)), ([m, rs, l, s, c]) => ({\n        label: attrs.label,\n        abbreviation: attrs.abbreviation,\n        credits: c,\n        module: m.id,\n        descriptionUrl: attrs.descriptionUrl,\n        language: l,\n        season: s,\n        recommendedSemester: rs\n      }));\n      this.createProtocol = (m, attrs) => this.parseProtocol(Object.assign(Object.assign({}, attrs), {\n        credits: m.credits.toString(),\n        module: JSON.parse(JSON.stringify(m.module))\n      }));\n      this.label = {\n        label: 'Bezeichnung',\n        attr: 'label',\n        kind: 'text',\n        disabled: false,\n        required: true\n      };\n      this.abbreviation = {\n        label: 'Abkürzung',\n        attr: 'abbreviation',\n        kind: 'text',\n        disabled: false,\n        required: true\n      };\n      this.module = {\n        label: 'Modul',\n        attr: 'module',\n        required: true,\n        disabled: false,\n        show: describeModule,\n        kind: 'auto-complete',\n        data: moduleService.modules()\n      };\n      this.recommendedSemester = {\n        label: 'Fachsemester',\n        attr: 'recommendedSemester',\n        required: true,\n        disabled: false,\n        show: s => s.toString(),\n        kind: 'auto-complete',\n        data: of(allSemesterIndices())\n      };\n      this.language = {\n        label: 'Sprache',\n        attr: 'language',\n        required: true,\n        disabled: false,\n        show: l => describeLanguage(l.value),\n        kind: 'auto-complete',\n        data: of(allLanguages().map(l => ({\n          value: l\n        })))\n      };\n      this.season = {\n        label: 'Angeboten in',\n        attr: 'season',\n        required: true,\n        disabled: false,\n        show: s => describeSeason(s.value),\n        kind: 'auto-complete',\n        data: of(allSeasons().map(s => ({\n          value: s\n        })))\n      };\n      this.credits = {\n        label: 'ECTS',\n        attr: 'credits',\n        required: true,\n        disabled: false,\n        kind: 'number',\n        min: 0.5\n      };\n      this.descriptionUrl = {\n        label: 'Link zum Modulehandbucheintrag',\n        attr: 'descriptionUrl',\n        required: true,\n        disabled: false,\n        kind: 'url'\n      };\n    }\n  }\n  SubmoduleService.ɵfac = function SubmoduleService_Factory(t) {\n    return new (t || SubmoduleService)(i0.ɵɵinject(i1.SubmoduleApiService), i0.ɵɵinject(i2.ModuleApiService));\n  };\n  SubmoduleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubmoduleService,\n    factory: SubmoduleService.ɵfac,\n    providedIn: 'root'\n  });\n  return SubmoduleService;\n})();","map":null,"metadata":{},"sourceType":"module"}