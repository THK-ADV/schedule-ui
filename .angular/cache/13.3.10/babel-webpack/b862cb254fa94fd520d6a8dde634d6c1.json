{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport { FormInputLike } from '../form-input';\nimport { mandatoryOptionsValidator, optionalOptionsValidator } from '../form-input-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/material/input\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\nfunction InputAutoCompleteComponent_mat_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", option_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.displayFn(option_r2), \" \");\n  }\n}\nexport const formControlForAutocompleteInput = i => {\n  switch (i.kind) {\n    case 'auto-complete':\n      return new FormControl({\n        value: undefined,\n        disabled: i.disabled\n      }, i.required ? mandatoryOptionsValidator() : optionalOptionsValidator());\n    default:\n      return undefined;\n  }\n};\nexport let InputAutoCompleteComponent = /*#__PURE__*/(() => {\n  class InputAutoCompleteComponent {\n    constructor() {\n      this.options = [];\n      this.filteredOptions = EMPTY;\n      this.observeData = () => {\n        this.sub = this.input.data.subscribe(data => {\n          this.options = data !== null && data !== void 0 ? data : [];\n          this.selectInitialValue();\n          this.initFilterOptions();\n        });\n      };\n      this.selectInitialValue = () => {\n        if (this.input.initialValue) {\n          this.formControl.setValue(this.input.initialValue(this.options));\n        }\n      };\n      this.initFilterOptions = () => {\n        this.filteredOptions = this.formControl.valueChanges.pipe(startWith(''), map(value => typeof value === 'string' ? value : this.input.show(value)), map(value => value ? this.filter(value) : this.options.slice()));\n      };\n      this.filter = input => {\n        const filterValue = input.toLowerCase();\n        return this.options.filter(t => this.input.show(t).toLowerCase().indexOf(filterValue) >= 0);\n      };\n      this.displayFn = value => {\n        var _a;\n        return (_a = value && this.input.show(value)) !== null && _a !== void 0 ? _a : '';\n      };\n      this.reset = () => {\n        this.formControl.reset(undefined, {\n          emitEvent: false\n        });\n        this.initFilterOptions();\n      };\n    }\n    ngOnInit() {\n      this.observeData();\n    }\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n    }\n  }\n  InputAutoCompleteComponent.ɵfac = function InputAutoCompleteComponent_Factory(t) {\n    return new (t || InputAutoCompleteComponent)();\n  };\n  InputAutoCompleteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InputAutoCompleteComponent,\n    selectors: [[\"schd-input-auto-complete\"]],\n    inputs: {\n      input: \"input\",\n      formControl: \"formControl\"\n    },\n    decls: 6,\n    vars: 7,\n    consts: [[\"matInput\", \"\", \"type\", \"text\", 3, \"placeholder\", \"formControl\", \"matAutocomplete\"], [\"autoActiveFirstOption\", \"\", 3, \"displayWith\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n    template: function InputAutoCompleteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\");\n        i0.ɵɵelement(1, \"input\", 0);\n        i0.ɵɵelementStart(2, \"mat-autocomplete\", 1, 2);\n        i0.ɵɵtemplate(4, InputAutoCompleteComponent_mat_option_4_Template, 2, 2, \"mat-option\", 3);\n        i0.ɵɵpipe(5, \"async\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(3);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"placeholder\", ctx.input.label)(\"formControl\", ctx.formControl)(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"displayWith\", ctx.displayFn);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(5, 5, ctx.filteredOptions));\n      }\n    },\n    directives: [i1.MatFormField, i2.MatInput, i3.DefaultValueAccessor, i4.MatAutocompleteTrigger, i3.NgControlStatus, i3.FormControlDirective, i4.MatAutocomplete, i5.NgForOf, i6.MatOption],\n    pipes: [i5.AsyncPipe],\n    styles: [\"\"]\n  });\n  return InputAutoCompleteComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}