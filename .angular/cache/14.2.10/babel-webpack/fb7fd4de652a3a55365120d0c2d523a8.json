{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { mapOpt, zip } from '../../utils/optional';\nimport { parseGraduation, parseTeachingUnit } from '../../utils/parser';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../http/study-program-api.service\";\nimport * as i2 from \"../../http/teaching-unit-api.service\";\nimport * as i3 from \"../../http/graduation-api.service\";\nexport let StudyProgramsService = /*#__PURE__*/(() => {\n  class StudyProgramsService {\n    constructor(http, tuService, gService) {\n      this.http = http;\n      this.tuService = tuService;\n      this.gService = gService;\n      this.columns = () => [{\n        attr: 'label',\n        title: 'Bezeichnung'\n      }, {\n        attr: 'abbreviation',\n        title: 'Abkürzung'\n      }, {\n        attr: 'teachingUnit.label',\n        title: 'Lehreinheit'\n      }, {\n        attr: 'graduation.abbreviation',\n        title: 'Abschluss'\n      }];\n      this.deleteAction = () => ({\n        labelForDialog: sp => sp.label,\n        delete: a => this.http.delete(a.id)\n      });\n      this.createAction = () => [{\n        create: attrs => mapOpt(this.parseProtocol(attrs), this.http.create) ?? EMPTY,\n        show: a => JSON.stringify(a)\n      }, {\n        objectName: 'Studiengang',\n        inputs: this.createInputs()\n      }];\n      this.updateAction = () => [{\n        update: (sp, attrs) => mapOpt(this.createProtocol(sp, attrs), p => this.http.update(p, sp.id)) ?? EMPTY,\n        show: a => JSON.stringify(a)\n      }, m => ({\n        objectName: 'Studiengang',\n        inputs: this.updateInputs(m)\n      })];\n      this.createInputs = () => [this.label, this.abbreviation, this.teachingUnit, this.graduation];\n      this.updateInputs = sp => [{\n        ...this.label,\n        initialValue: sp.label\n      }, {\n        ...this.abbreviation,\n        initialValue: sp.abbreviation\n      }, {\n        ...this.teachingUnit,\n        initialValue: tus => tus.find(tu => tu.id === sp.teachingUnit.id)\n      }, {\n        ...this.graduation,\n        initialValue: gs => gs.find(g => g.id === sp.graduation.id)\n      }];\n      this.studyPrograms = () => this.http.studyProgramsAtomic();\n      this.parseProtocol = attrs => mapOpt(zip(parseTeachingUnit(attrs.teachingUnit), parseGraduation(attrs.graduation)), ([tu, g]) => ({\n        label: attrs.label,\n        abbreviation: attrs.abbreviation,\n        teachingUnit: tu.id,\n        graduation: g.id\n      }));\n      this.createProtocol = (sp, attrs) => this.parseProtocol({\n        ...attrs,\n        teachingUnit: JSON.parse(JSON.stringify(attrs.teachingUnit)),\n        graduation: JSON.parse(JSON.stringify(attrs.graduation))\n      });\n      this.label = {\n        label: 'Bezeichnung',\n        attr: 'label',\n        kind: 'text',\n        disabled: false,\n        required: true\n      };\n      this.abbreviation = {\n        label: 'Abkürzung',\n        attr: 'abbreviation',\n        kind: 'text',\n        disabled: false,\n        required: true\n      };\n      this.teachingUnit = {\n        label: 'Lehreinheit',\n        attr: 'teachingUnit',\n        disabled: false,\n        required: true,\n        kind: 'auto-complete',\n        data: tuService.teachingUnits(),\n        show: a => a.label\n      };\n      this.graduation = {\n        label: 'Abschluss',\n        attr: 'graduation',\n        disabled: false,\n        required: true,\n        kind: 'auto-complete',\n        data: gService.graduations(),\n        show: a => a.label\n      };\n    }\n  }\n  StudyProgramsService.ɵfac = function StudyProgramsService_Factory(t) {\n    return new (t || StudyProgramsService)(i0.ɵɵinject(i1.StudyProgramApiService), i0.ɵɵinject(i2.TeachingUnitApiService), i0.ɵɵinject(i3.GraduationApiService));\n  };\n  StudyProgramsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StudyProgramsService,\n    factory: StudyProgramsService.ɵfac,\n    providedIn: 'root'\n  });\n  return StudyProgramsService;\n})();","map":null,"metadata":{},"sourceType":"module"}