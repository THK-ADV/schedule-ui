{"ast":null,"code":"import { EMPTY, of } from 'rxjs';\nimport { nestedObjectPropertyAccessor } from '../table/table.component';\nimport { openDeleteDialog, openDialog } from '../dialog-opener';\nimport { CreateDialogComponent } from '../create-dialog/create-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../structure/alert/alert.service\";\nimport * as i3 from \"../table/table.component\";\nimport * as i4 from \"../header-button/header-button.component\";\nexport class CrudTableComponent {\n  constructor(dialog, alertService) {\n    this.dialog = dialog;\n    this.alertService = alertService;\n    this.headerTitle = 'header';\n    this.tooltipTitle = 'tooltip';\n    this.columns = [];\n    this.pageSizeOptions = [25, 50, 100];\n    this.useTableContentForFiltering = false;\n    this.sortingDataAccessor = nestedObjectPropertyAccessor;\n    this.tableContent = nestedObjectPropertyAccessor;\n    this.data$ = EMPTY;\n    this.subs = [];\n    this.fetchData = () => of([]);\n    this.initOnDelete = d => {\n      this.onDelete = a => {\n        const label = d.labelForDialog(a);\n        const s = openDeleteDialog(this.dialog, {\n          label\n        }, () => d.delete(a)).subscribe(_ => {\n          this.data$ = this.fetchData();\n          this.reportDeleted(label);\n        });\n        this.subs.push(s);\n      };\n    };\n    this.initOnCreate = ([c, cdd]) => {\n      this.onCreate = () => {\n        const s = openDialog(CreateDialogComponent.instance(this.dialog, cdd, 'create'), res => res === 'cancel' ? EMPTY : c.create(res)).subscribe(created => {\n          this.data$ = this.fetchData();\n          this.reportCreated(c.show(created));\n        });\n        this.subs.push(s);\n      };\n    };\n    this.initOnUpdate = ([u, udd]) => {\n      this.onUpdate = a => {\n        const s = openDialog(CreateDialogComponent.instance(this.dialog, udd(a), 'update'), res => res === 'cancel' ? EMPTY : u.update(a, res)).subscribe(updated => {\n          this.data$ = this.fetchData();\n          this.reportUpdated(u.show(updated));\n        });\n        this.subs.push(s);\n      };\n    };\n    this.reportDeleted = str => this.alertService.reportSuccess(`deleted: ${str}`);\n    this.reportCreated = str => this.alertService.reportSuccess(`created: ${str}`);\n    this.reportUpdated = str => this.alertService.reportSuccess(`updated: ${str}`);\n  }\n  ngOnInit() {\n    this.data$ = this.fetchData();\n    if (this.delete) {\n      this.initOnDelete(this.delete);\n    }\n    if (this.create) {\n      this.initOnCreate(this.create);\n    }\n    if (this.update) {\n      this.initOnUpdate(this.update);\n    }\n  }\n  ngOnDestroy() {\n    this.subs.forEach(_ => _.unsubscribe());\n  }\n}\nCrudTableComponent.ɵfac = function CrudTableComponent_Factory(t) {\n  return new (t || CrudTableComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.AlertService));\n};\nCrudTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CrudTableComponent,\n  selectors: [[\"schd-crud-table\"]],\n  inputs: {\n    headerTitle: \"headerTitle\",\n    tooltipTitle: \"tooltipTitle\",\n    columns: \"columns\",\n    pageSizeOptions: \"pageSizeOptions\",\n    useTableContentForFiltering: \"useTableContentForFiltering\",\n    sortingDataAccessor: \"sortingDataAccessor\",\n    tableContent: \"tableContent\",\n    sort: \"sort\",\n    filterAttrs: \"filterAttrs\",\n    delete: \"delete\",\n    create: \"create\",\n    update: \"update\",\n    fetchData: \"fetchData\"\n  },\n  decls: 2,\n  vars: 13,\n  consts: [[3, \"headerTitle\", \"tooltipTitle\", \"create\"], [3, \"data\", \"columns\", \"sort\", \"tableContent\", \"sortingDataAccessor\", \"useTableContentForFiltering\", \"pageSizeOptions\", \"filterAttrs\", \"delete\", \"edit\"]],\n  template: function CrudTableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"schd-header-button\", 0)(1, \"schd-table\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"headerTitle\", ctx.headerTitle)(\"tooltipTitle\", ctx.tooltipTitle)(\"create\", ctx.onCreate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.data$)(\"columns\", ctx.columns)(\"sort\", ctx.sort)(\"tableContent\", ctx.tableContent)(\"sortingDataAccessor\", ctx.sortingDataAccessor)(\"useTableContentForFiltering\", ctx.useTableContentForFiltering)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"filterAttrs\", ctx.filterAttrs)(\"delete\", ctx.onDelete)(\"edit\", ctx.onUpdate);\n    }\n  },\n  dependencies: [i3.TableComponent, i4.HeaderButtonComponent]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}