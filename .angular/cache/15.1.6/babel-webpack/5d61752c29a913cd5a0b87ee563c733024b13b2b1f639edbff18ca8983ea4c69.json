{"ast":null,"code":"import { groupBy, mapGroup } from '../../utils/group-by';\nimport { formatShort } from '../../models/course-type';\nimport { formatTime } from '../../utils/date-format';\nimport { Ordering } from '../../utils/ordering';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fullcalendar/angular\";\nconst _c0 = [\"cal\"];\nexport class ScheduleViewComponent {\n  constructor() {\n    this.calendarOptions = {\n      plugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\n      initialView: 'timeGridWeek',\n      allDaySlot: false,\n      editable: false,\n      locale: 'de',\n      weekends: false,\n      nowIndicator: true,\n      dayHeaderFormat: {\n        weekday: 'short',\n        month: 'numeric',\n        day: 'numeric',\n        omitCommas: true\n      },\n      slotDuration: '00:15:00',\n      slotLabelInterval: {\n        hours: 1\n      },\n      slotLabelFormat: {\n        hour: 'numeric',\n        minute: '2-digit',\n        omitZeroMinute: true\n      },\n      slotMinTime: '08:00:00',\n      slotMaxTime: '22:00:00',\n      height: 'auto',\n      weekNumbers: true,\n      weekText: 'KW',\n      slotEventOverlap: false,\n      eventMaxStack: undefined\n    };\n    this.onEventClick = arg => console.log(Object.create(arg.event.extendedProps.value));\n    /*\n    eventContent: function(arg) {\n      let divEl = document.createElement('div')\n      let htmlTitle = arg.event._def.extendedProps['html'];\n      if (arg.event.extendedProps.isHTML) {\n          divEl.innerHTML = htmlTitle\n      } else {\n          divEl.innerHTML = arg.event.title\n      }\n      let arrayOfDomNodes = [ divEl ]\n      return { domNodes: arrayOfDomNodes }\n    }\n     */\n    this.eventContent = arg => {\n      const event = arg.event;\n      const a = arg.event.extendedProps.value;\n      const studyPrograms = a.map(e => this.formatStudyProgram(e.moduleExaminationRegulation.examinationRegulation)).join(',');\n      const first = a[0];\n      const start = formatTime(first.start, 'HH:mm');\n      const end = formatTime(first.end, 'HH:mm');\n      const divEl = document.createElement('p');\n      divEl.innerHTML = `\n      <span style=\"font-size: x-small\">${start} - ${end}</span>\n      <br>\n      <span>${event.title}</span>\n      <br>\n      <span>${studyPrograms}</span>\n      `;\n      return {\n        domNodes: [divEl]\n      };\n    };\n    // eventClassNames = (arg: EventContentArg) => {\n    //   return ['foo']\n    // }\n    this.makeEvents = xs => {\n      const partialEvents = xs.map(x => ({\n        start: x.start.date,\n        end: x.end.date,\n        extendedProps: {\n          value: x\n        }\n      }));\n      return this.mergeSameSlots(partialEvents);\n    };\n    this.mergeSameSlots = events => {\n      const uniqueEventID = e => `${e.extendedProps.value.course.id}_${e.start.getTime()}_${e.end.getTime()}`;\n      const groupByCourse = groupBy(events, uniqueEventID);\n      return mapGroup(groupByCourse, (_, xs) => {\n        const x = xs[0];\n        const courseType = x.extendedProps.value.course.courseType;\n        const subModuleLabel = x.extendedProps.value.course.subModule.abbreviation;\n        const courseTypeLabel = formatShort(courseType);\n        // const studyProgramLabel = xs\n        //   .map(e => this.formatStudyProgram(e.extendedProps.value.moduleExaminationRegulation.examinationRegulation))\n        //   .join(',')\n        return {\n          title: `${subModuleLabel} ${courseTypeLabel}`,\n          start: x.start,\n          end: x.end,\n          backgroundColor: this.colorForCourseType(courseType),\n          extendedProps: {\n            value: xs.map(e => e.extendedProps.value)\n          }\n        };\n      });\n    };\n    this.formatStudyProgram = e => {\n      const poNumber = e.number;\n      const studyProgram = e.studyProgram.abbreviation;\n      return `${studyProgram} (${poNumber})`;\n    };\n    this.colorForCourseType = ct => {\n      switch (ct) {\n        case 'lecture':\n          return '#fc8403';\n        case 'seminar':\n          return '#fcdf03';\n        case 'practical':\n          return '#11c255';\n        case 'exercise':\n          return '#0048ff';\n        case 'tutorial':\n          return '#9d00ff';\n        case 'unknown':\n          return '#ff0040';\n      }\n    };\n  }\n  set scheduleEntries(xs) {\n    this.calendarOptions.events = this.makeEvents(xs);\n    const minDate = Ordering.min(xs, Ordering.contraMap(Ordering.dateOrd, a => a.date))?.date;\n    if (minDate) {\n      this.calendar?.getApi()?.gotoDate(minDate); // TODO remove if needed\n    }\n  }\n\n  ngOnInit() {\n    this.calendarOptions.eventClick = this.onEventClick;\n    this.calendarOptions.eventContent = this.eventContent;\n    // this.calendarOptions.eventClassNames = this.eventClassNames\n  }\n}\n\nScheduleViewComponent.ɵfac = function ScheduleViewComponent_Factory(t) {\n  return new (t || ScheduleViewComponent)();\n};\nScheduleViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleViewComponent,\n  selectors: [[\"schd-schedule-view\"]],\n  viewQuery: function ScheduleViewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendar = _t.first);\n    }\n  },\n  inputs: {\n    scheduleEntries: \"scheduleEntries\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"options\"], [\"cal\", \"\"]],\n  template: function ScheduleViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"full-calendar\", 0, 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"options\", ctx.calendarOptions);\n    }\n  },\n  dependencies: [i1.FullCalendarComponent],\n  styles: [\".example-card[_ngcontent-%COMP%]{max-width:400px}.example-header-image[_ngcontent-%COMP%]{background-size:cover}p.foo[_ngcontent-%COMP%]{font-size:large!important}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}