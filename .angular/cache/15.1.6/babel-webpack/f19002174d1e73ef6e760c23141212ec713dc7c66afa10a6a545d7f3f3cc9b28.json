{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { EMPTY } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/material/core\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/icon\";\nconst _c0 = [\"search\"];\nfunction FilterOptionComponent_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function FilterOptionComponent_button_5_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClear($event));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FilterOptionComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r6 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", option_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.displayFn(option_r6), \" \");\n  }\n}\nexport class FilterOptionComponent {\n  constructor() {\n    this.title = '';\n    this.display = _ => '';\n    this.options = [];\n    this.onSelect = new EventEmitter();\n    this.filteredOptions = EMPTY;\n    this.formControl = new UntypedFormControl();\n    this.hasSelection = false;\n    this.initFilterOptions = () => {\n      this.filteredOptions = this.formControl.valueChanges.pipe(startWith(''), map(value => typeof value === 'string' ? value : this.display(value)), map(value => value ? this.filter(value) : this.options.slice()));\n    };\n    this.filter = input => {\n      const filterValue = input.toLowerCase();\n      return this.options.filter(t => this.display(t).toLowerCase().indexOf(filterValue) >= 0);\n    };\n    this.displayFn = value => {\n      return (value && this.display(value)) ?? '';\n    };\n    this.onSelected = e => {\n      this.hasSelection = true;\n      this.onSelect.emit(e.option.value);\n      this.deselect();\n    };\n    this.onClosed = () => {\n      if (!this.hasSelection && !this.formControl.value) {\n        this.onSelect.emit(undefined);\n      }\n      this.hasSelection = false;\n      this.deselect();\n    };\n    this.onClear = event => {\n      event.stopPropagation();\n      this.onSelect.emit(undefined);\n      this.reset();\n    };\n    this.reset = () => {\n      this.formControl.reset(undefined, {\n        emitEvent: false\n      });\n      this.initFilterOptions();\n      this.deselect();\n    };\n    this.deselect = () => {\n      if (this.search) {\n        this.search.nativeElement.blur();\n      }\n    };\n  }\n  set values(ts) {\n    this.options = ts;\n    this.initFilterOptions();\n  }\n  ngOnInit() {\n    this.initFilterOptions();\n  }\n}\nFilterOptionComponent.ɵfac = function FilterOptionComponent_Factory(t) {\n  return new (t || FilterOptionComponent)();\n};\nFilterOptionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FilterOptionComponent,\n  selectors: [[\"schd-filter-option\"]],\n  viewQuery: function FilterOptionComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.search = _t.first);\n    }\n  },\n  inputs: {\n    title: \"title\",\n    display: \"display\",\n    values: \"values\"\n  },\n  outputs: {\n    onSelect: \"onSelect\"\n  },\n  decls: 10,\n  vars: 9,\n  consts: [[1, \"example-full-width\"], [\"type\", \"text\", \"aria-label\", \"teachingUnit\", \"matInput\", \"\", 3, \"placeholder\", \"formControl\", \"matAutocomplete\"], [\"search\", \"\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"], [\"autoActiveFirstOption\", \"\", \"panelWidth\", \"auto\", 3, \"displayWith\", \"optionSelected\", \"closed\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [3, \"value\"]],\n  template: function FilterOptionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0)(1, \"mat-label\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 1, 2);\n      i0.ɵɵtemplate(5, FilterOptionComponent_button_5_Template, 3, 0, \"button\", 3);\n      i0.ɵɵelementStart(6, \"mat-autocomplete\", 4, 5);\n      i0.ɵɵlistener(\"optionSelected\", function FilterOptionComponent_Template_mat_autocomplete_optionSelected_6_listener($event) {\n        return ctx.onSelected($event);\n      })(\"closed\", function FilterOptionComponent_Template_mat_autocomplete_closed_6_listener() {\n        return ctx.onClosed();\n      });\n      i0.ɵɵtemplate(8, FilterOptionComponent_mat_option_8_Template, 2, 2, \"mat-option\", 6);\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r2 = i0.ɵɵreference(7);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"placeholder\", ctx.title)(\"formControl\", ctx.formControl)(\"matAutocomplete\", _r2);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.formControl.value);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"displayWith\", ctx.displayFn);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 7, ctx.filteredOptions));\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.MatFormField, i2.MatLabel, i2.MatSuffix, i3.MatInput, i4.MatAutocomplete, i4.MatAutocompleteTrigger, i5.MatOption, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlDirective, i7.MatButton, i8.MatIcon, i1.AsyncPipe],\n  styles: [\"mat-form-field[_ngcontent-%COMP%]{height:60px}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}