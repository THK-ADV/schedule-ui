{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { mapOpt, zip3 } from '../../utils/optional';\nimport { parseDate, parseIntNumber, parseStudyProgramAtom } from '../../utils/parser';\nimport { describeStudyProgramAtom } from '../../utils/describe';\nimport { formatDate } from '../../utils/date-format';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../http/examination-regulation-api.service\";\nimport * as i2 from \"../../http/study-program-api.service\";\nexport class ExaminationRegulationsService {\n  constructor(http, spService) {\n    this.http = http;\n    this.spService = spService;\n    this.examinationRegulations = () => this.http.examinationRegulations();\n    this.columns = () => [{\n      attr: 'studyProgram',\n      title: 'Studiengang'\n    }, {\n      attr: 'number',\n      title: 'PO Nummer'\n    }, {\n      attr: 'start',\n      title: 'Start'\n    }, {\n      attr: 'end',\n      title: 'Ende'\n    }];\n    this.deleteAction = () => ({\n      labelForDialog: a => describeStudyProgramAtom(a.studyProgram),\n      delete: a => this.http.delete(a.id)\n    });\n    this.createAction = () => [{\n      create: attrs => mapOpt(this.parseProtocol(attrs), this.http.create) ?? EMPTY,\n      show: a => JSON.stringify(a)\n    }, {\n      objectName: 'Prüfungsordnung',\n      inputs: this.createInputs()\n    }];\n    this.updateAction = () => [{\n      update: (m, attrs) => mapOpt(this.createProtocol(m, attrs), p => this.http.update(p, m.id)) ?? EMPTY,\n      show: a => JSON.stringify(a)\n    }, m => ({\n      objectName: 'Modul',\n      inputs: this.updateInputs(m)\n    })];\n    this.createInputs = () => [this.studyProgram, this.po, this.start, this.end];\n    this.updateInputs = e => [{\n      ...this.studyProgram,\n      initialValue: sps => sps.find(_ => _.id === e.studyProgram.id)\n    }, {\n      ...this.po,\n      initialValue: e.number\n    }, {\n      ...this.start,\n      initialValue: e.start\n    }, {\n      ...this.end,\n      initialValue: e.end\n    }];\n    this.parseProtocol = attrs => mapOpt(zip3(parseStudyProgramAtom(attrs.studyProgram), parseIntNumber(attrs.po), parseDate(attrs.start)), ([sp, po, d]) => ({\n      studyProgram: sp.id,\n      number: po,\n      start: formatDate(d, 'yyyy-MM-dd'),\n      end: mapOpt(parseDate(attrs.end), a => formatDate(a, 'yyyy-MM-dd'))\n    }));\n    this.createProtocol = (e, attrs) => this.parseProtocol({\n      ...attrs\n    });\n    this.studyProgram = {\n      label: 'Studiengang',\n      attr: 'studyProgram',\n      disabled: false,\n      required: true,\n      data: spService.studyProgramsAtomic(),\n      show: describeStudyProgramAtom,\n      kind: 'auto-complete'\n    };\n    this.po = {\n      label: 'PO Nummer',\n      attr: 'po',\n      disabled: false,\n      required: true,\n      min: 1,\n      kind: 'number'\n    };\n    this.start = {\n      label: 'Start',\n      attr: 'start',\n      disabled: false,\n      required: true,\n      kind: 'date'\n    };\n    this.end = {\n      label: 'Ende',\n      attr: 'end',\n      disabled: false,\n      required: false,\n      kind: 'date'\n    };\n  }\n}\nExaminationRegulationsService.ɵfac = function ExaminationRegulationsService_Factory(t) {\n  return new (t || ExaminationRegulationsService)(i0.ɵɵinject(i1.ExaminationRegulationApiService), i0.ɵɵinject(i2.StudyProgramApiService));\n};\nExaminationRegulationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ExaminationRegulationsService,\n  factory: ExaminationRegulationsService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}