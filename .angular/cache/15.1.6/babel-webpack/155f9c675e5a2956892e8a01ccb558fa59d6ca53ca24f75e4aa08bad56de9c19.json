{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { mapOpt, zip4 } from '../../utils/optional';\nimport { parseDate } from '../../utils/parser';\nimport { formatDate } from '../../utils/date-format';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../http/semester-api.service\";\nexport class SemestersService {\n  constructor(http) {\n    this.http = http;\n    this.columns = () => [{\n      attr: 'label',\n      title: 'Bezeichnung'\n    }, {\n      attr: 'abbreviation',\n      title: 'Abkürzung'\n    }, {\n      attr: 'start',\n      title: 'Beginn'\n    }, {\n      attr: 'end',\n      title: 'Ende'\n    }, {\n      attr: 'lectureStart',\n      title: 'Vorlesungsbeginn'\n    }, {\n      attr: 'lectureEnd',\n      title: 'Vorlesungsende'\n    }];\n    this.deleteAction = () => ({\n      labelForDialog: a => a.label,\n      delete: a => this.http.delete(a.id)\n    });\n    this.createAction = () => [{\n      create: attrs => mapOpt(this.parseProtocol(attrs), this.http.create) ?? EMPTY,\n      show: a => JSON.stringify(a)\n    }, {\n      objectName: 'Semester',\n      inputs: this.createInputs()\n    }];\n    this.updateAction = () => [{\n      update: (m, attrs) => mapOpt(this.createProtocol(m, attrs), p => this.http.update(p, m.id)) ?? EMPTY,\n      show: a => JSON.stringify(a)\n    }, m => ({\n      objectName: 'Semester',\n      inputs: this.updateInputs(m)\n    })];\n    this.semesters = () => this.http.semesters();\n    this.createInputs = () => [this.label, this.abbreviation, this.start, this.end, this.lectureStart, this.lectureEnd];\n    this.updateInputs = s => [{\n      ...this.label,\n      initialValue: s.label\n    }, {\n      ...this.abbreviation,\n      initialValue: s.abbreviation\n    }, {\n      ...this.start,\n      initialValue: s.start\n    }, {\n      ...this.end,\n      initialValue: s.end\n    }, {\n      ...this.lectureStart,\n      initialValue: s.lectureStart\n    }, {\n      ...this.lectureEnd,\n      initialValue: s.lectureEnd\n    }];\n    this.parseProtocol = attrs => mapOpt(zip4(parseDate(attrs.start), parseDate(attrs.end), parseDate(attrs.lectureStart), parseDate(attrs.lectureEnd)), ([s, e, ls, le]) => ({\n      label: attrs.label,\n      abbreviation: attrs.abbreviation,\n      start: formatDate(s, 'yyyy-MM-dd'),\n      end: formatDate(e, 'yyyy-MM-dd'),\n      lectureStart: formatDate(ls, 'yyyy-MM-dd'),\n      lectureEnd: formatDate(le, 'yyyy-MM-dd')\n    }));\n    this.createProtocol = (s, attrs) => this.parseProtocol({\n      ...attrs\n    });\n    this.label = {\n      label: 'Bezeichnung',\n      attr: 'label',\n      disabled: false,\n      required: true,\n      kind: 'text'\n    };\n    this.abbreviation = {\n      label: 'Abkürzung',\n      attr: 'abbreviation',\n      disabled: false,\n      required: true,\n      kind: 'text'\n    };\n    this.start = {\n      label: 'Beginn',\n      attr: 'start',\n      disabled: false,\n      required: true,\n      kind: 'date'\n    };\n    this.end = {\n      label: 'Ende',\n      attr: 'end',\n      disabled: false,\n      required: true,\n      kind: 'date'\n    };\n    this.lectureStart = {\n      label: 'Vorlesungsbeginn',\n      attr: 'lectureStart',\n      disabled: false,\n      required: true,\n      kind: 'date'\n    };\n    this.lectureEnd = {\n      label: 'Vorlesungsende',\n      attr: 'lectureEnd',\n      disabled: false,\n      required: true,\n      kind: 'date'\n    };\n  }\n}\nSemestersService.ɵfac = function SemestersService_Factory(t) {\n  return new (t || SemestersService)(i0.ɵɵinject(i1.SemesterApiService));\n};\nSemestersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SemestersService,\n  factory: SemestersService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}