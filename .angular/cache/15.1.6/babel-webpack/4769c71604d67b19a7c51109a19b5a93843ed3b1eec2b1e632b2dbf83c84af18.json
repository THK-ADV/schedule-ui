{"ast":null,"code":"import { BehaviorSubject, combineLatest, Subject } from 'rxjs';\nimport { map, mapTo, takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class SchdMatTableResponsiveDirective {\n  constructor(table, renderer) {\n    this.table = table;\n    this.renderer = renderer;\n    this.onDestroy$ = new Subject();\n    this.theadChanged$ = new BehaviorSubject(true);\n    this.tbodyChanged$ = new Subject();\n    this.theadObserver = new MutationObserver(() => this.theadChanged$.next(true));\n    this.tbodyObserver = new MutationObserver(() => this.tbodyChanged$.next(true));\n  }\n  ngOnInit() {\n    this.thead = this.table.nativeElement.querySelector('thead');\n    this.tbody = this.table.nativeElement.querySelector('tbody');\n    this.theadObserver.observe(this.thead, {\n      characterData: true,\n      subtree: true\n    });\n    this.tbodyObserver.observe(this.tbody, {\n      childList: true\n    });\n  }\n  ngAfterViewInit() {\n    /**\n     * Set the \"data-column-name\" attribute for every body row cell, either on\n     * thead row changes (e.g. language changes) or tbody rows changes (add, delete).\n     */\n    combineLatest([this.theadChanged$, this.tbodyChanged$]).pipe(mapTo({\n      headRow: this.thead.rows.item(0),\n      bodyRows: this.tbody.rows\n    }), map(({\n      headRow,\n      bodyRows\n    }) => ({\n      // @ts-ignore\n      // tslint:disable-next-line:no-non-null-assertion\n      columnNames: [...headRow.children].map(headerCell => headerCell.textContent),\n      // @ts-ignore\n      rows: [...bodyRows].map(row => [...row.children])\n    })), takeUntil(this.onDestroy$)).subscribe(({\n      columnNames,\n      rows\n    }) => {\n      rows.forEach(rowCells => rowCells.forEach(cell => this.renderer.setAttribute(cell, 'data-column-name', columnNames[cell.cellIndex])));\n    });\n  }\n  ngOnDestroy() {\n    this.theadObserver.disconnect();\n    this.tbodyObserver.disconnect();\n    this.onDestroy$.next(true);\n  }\n}\nSchdMatTableResponsiveDirective.ɵfac = function SchdMatTableResponsiveDirective_Factory(t) {\n  return new (t || SchdMatTableResponsiveDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nSchdMatTableResponsiveDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: SchdMatTableResponsiveDirective,\n  selectors: [[\"\", \"schdMatTableResponsive\", \"\"]]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}